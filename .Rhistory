accuracy(knn.data, target.test)) %>% . / (max(.))
scaled.acc <- accuracies / max(accuracies)
scaled.acc
scaled.acc <- accuracies / max(accuracies, na.rm = na.omit)
scaled.acc
??scale
?scale
scaled.acc <- scale(accuracies, scale = T, center = T)
scaled.acc
scaled.acc <- as.vector(scale(accuracies, scale = T, center = T))
scaled.acc
accuracy(logit.data, target.test, na.omit)
accuracy(logit.data, target.test, na.action = na.omit)
accuracies <- c(accuracy(rf.data, target.test),
accuracy(linxgb.data, target.test),
accuracy(treexgb.data, target.test),
accuracy(elm.data, target.test),
accuracy(treebag.data, target.test),
accuracy(nnet.data, target.test),
accuracy(knn.data, target.test))
scaled.acc <- accuracies / max(accuracies)
scaled.acc
class.prob <- with(predictions.df,
scaled.acc[1] * rf + scaled.acc[2] * lxgb +
scaled.acc[3] * txgb + scaled.acc[4] * elm +
scaled.acc[5] * ctree + scaled.acc[6] * treebag +
scaled.acc[7] * nnet + scaled.acc[8] * knn)
class.prob <- with(as.numeric(predictions.df),
scaled.acc[1] * rf + scaled.acc[2] * lxgb +
scaled.acc[3] * txgb + scaled.acc[4] * elm +
scaled.acc[5] * ctree + scaled.acc[6] * treebag +
scaled.acc[7] * nnet + scaled.acc[8] * knn)
class.prob <- with(predictions.df,
scaled.acc[1] * as.numeric(rf) + scaled.acc[2] * as.numeric(lxgb) +
scaled.acc[3] * as.numeric(txgb) + scaled.acc[4] * as.numeric(elm) +
scaled.acc[5] * as.numeric(ctree) + scaled.acc[6] * as.numeric(treebag) +
scaled.acc[7] * as.numeric(nnet) + scaled.acc[8] * as.numeric(knn))
class.prob
scaled.acc[1] * as.numeric(predictions.df$rf)
scaled.acc
accuracies <- c(accuracy(rf.data, target.test),
accuracy(linxgb.data, target.test),
accuracy(treexgb.data, target.test),
accuracy(elm.data, target.test),
accuracy(treebag.data, target.test),
accuracy(ctree.data, target.test),
accuracy(nnet.data, target.test),
accuracy(knn.data, target.test))
scaled.acc <- accuracies / max(accuracies)
predictions.df <- data.frame(rf = rf.data, lxgb = linxgb.data, txgb = treexgb.data,
elm = elm.data, ctree = ctree.data,
treebag = treebag.data, nnet = nnet.data, knn = knn.data, target = target.test)
class.prob <- with(predictions.df,
scaled.acc[1] * as.numeric(rf) + scaled.acc[2] * as.numeric(lxgb) +
scaled.acc[3] * as.numeric(txgb) + scaled.acc[4] * as.numeric(elm) +
scaled.acc[5] * as.numeric(ctree) + scaled.acc[6] * as.numeric(treebag) +
scaled.acc[7] * as.numeric(nnet) + scaled.acc[8] * as.numeric(knn))
class.prob
scaled.acc <- accuracies / sum(accuracies)
scaled.acc
predictions.df <- data.frame(rf = rf.data, lxgb = linxgb.data, txgb = treexgb.data,
elm = elm.data, ctree = ctree.data,
treebag = treebag.data, nnet = nnet.data, knn = knn.data, target = target.test)
class.prob <- with(predictions.df,
scaled.acc[1] * as.numeric(rf) + scaled.acc[2] * as.numeric(lxgb) +
scaled.acc[3] * as.numeric(txgb) + scaled.acc[4] * as.numeric(elm) +
scaled.acc[5] * as.numeric(ctree) + scaled.acc[6] * as.numeric(treebag) +
scaled.acc[7] * as.numeric(nnet) + scaled.acc[8] * as.numeric(knn))
class.prob
data.frame(class.prob, target.test)
final.predictions <- round(class.prob)
final.predictions
table(final.predictions, target.test)
for(i in 1 : length(data$Last.Financing.Size)) {
dummy <- data$Last.Financing.Size[i]
if(dummy <= 5)       { classes[i] <- 1 }
else if(dummy <= 10) { classes[i] <- 2 }
else if(dummy <= 25) { classes[i] <- 3 }
else if(dummy <= 40) { classes[i] <- 4 }
}
data$Classes <- classes
classes <- c()
source('C:/Users/Abhinav/Desktop/VC-PE-Engine/secondary.R', echo=TRUE)
any(is.na(trai))
any(is.na(train))
train
str(train)
data$Classes
data[885, ]
sub.data <- complete(mice.output)
sub.data
# DATA CLEANING
data$Total.Raised <- as.numeric(data$Total.Raised)
data$Last.Financing.Size <- as.numeric(data$Last.Financing.Size)
data <- as.data.frame(lapply(data, factor))
data$Total.Raised <- data$Total.Raised - data$Last.Financing.Size
data$ID <- seq(1, length(data$Employees))
data$Employees <- as.integer(levels(data$Employees))[data$Employees]
data$Last.Financing.Size <- as.numeric(levels(data$Last.Financing.Size))[data$Last.Financing.Size]
data$Last.Financing.Valuation <- as.numeric(levels(data$Last.Financing.Valuation))[data$Last.Financing.Valuation]
data <- read.csv('data.csv', stringsAsFactors = F, strip.white = T, na.strings = "")
# DATA CLEANING
data$Total.Raised <- as.numeric(data$Total.Raised)
data$Last.Financing.Size <- as.numeric(data$Last.Financing.Size)
data$Total.Raised <- data$Total.Raised - data$Last.Financing.Size
data <- as.data.frame(lapply(data, factor))
data$ID <- seq(1, length(data$Employees))
data$Employees <- as.integer(levels(data$Employees))[data$Employees]
data$Last.Financing.Size <- as.numeric(levels(data$Last.Financing.Size))[data$Last.Financing.Size]
data$Last.Financing.Valuation <- as.numeric(levels(data$Last.Financing.Valuation))[data$Last.Financing.Valuation]
data$Total.Raised <- as.numeric(levels(data$Total.Raised))[data$Total.Raised]
# EXPLORATORY DATA ANALYSIS
#source("exploratory.R")
# IMPUTATION WITH MICE
sub.data <- dplyr::select(data, c("Employees", "Total.Raised", "Last.Financing.Size", "Last.Financing.Valuation", "Primary.Industry.Sector",
"Primary.Industry.Group", "Last.Financing.Deal.Type",
"Last.Financing.Deal.Type.2", "X..Active.Investors"))
colnames(data)
data <- dplyr::select(data, -c(1, 4, 5, 6, 9, 15, 16, 17))
colnames(daa)
colnames(data)
data$Last.Financing.Deal.Type.2 <- sub.data$Last.Financing.Deal.Type.2
data$Last.Financing.Valuation <- sub.data$Last.Financing.Valuation
data$Total.Raised <- sub.data$Total.Raised
data$Last.Financing.Size <- sub.data$Last.Financing.Size
colnames(data)
i
i <- 1
any(is.na(data))
data$Last.Financing.Size
mice.output <- mice(data = sub.data, nnet.MaxNWts = 2000, m = 3)
sub.data <- complete(mice.output)
data <- dplyr::select(data, -c(1, 4, 5, 6, 9, 15, 16, 17))
data$Last.Financing.Deal.Type.2 <- sub.data$Last.Financing.Deal.Type.2
data$Last.Financing.Valuation <- sub.data$Last.Financing.Valuation
data$Total.Raised <- sub.data$Total.Raised
data$Last.Financing.Size <- sub.data$Last.Financing.Size
classes <- c()
for(i in 1 : length(data$Last.Financing.Size)) {
dummy <- data$Last.Financing.Size[i]
if(dummy <= 5)       { classes[i] <- 1 }
else if(dummy <= 10) { classes[i] <- 2 }
else if(dummy <= 25) { classes[i] <- 3 }
else if(dummy <= 40) { classes[i] <- 4 }
}
data$Classes <- classes
data$Classes
classes <- c()
for(i in 1 : length(sub.data$Last.Financing.Size)) {
dummy <- sub.data$Last.Financing.Size[i]
if(dummy <= 5)       { classes[i] <- 1 }
else if(dummy <= 10) { classes[i] <- 2 }
else if(dummy <= 25) { classes[i] <- 3 }
else if(dummy <= 40) { classes[i] <- 4 }
}
data$Classes <- classes
data$Classes
sub.data$Last.Financing.Size
sub.data[653]
sub.data[653, ]
sub.data$Last.Financing.Size[653]
for(i in 1 : length(sub.data$Last.Financing.Size)) {
dummy <- sub.data$Last.Financing.Size[i]
if(dummy <= 5)       { classes[i] <- 1 }
else if(dummy <= 10) { classes[i] <- 2 }
else if(dummy <= 25) { classes[i] <- 3 }
else                 { classes[i] <- 4 }
}
data$Classes <- classes
mean(sub.data$Last.Financing.Size)
for(i in 1 : length(sub.data$Last.Financing.Size)) {
dummy <- sub.data$Last.Financing.Size[i]
if(dummy <= 5)       { classes[i] <- 1 }
else if(dummy <= 15) { classes[i] <- 2 }
else if(dummy <= 25) { classes[i] <- 3 }
else                 { classes[i] <- 4 }
}
data$Classes <- classes
# MODEL BUILDING
#TODO: TURN THIS INTO A CLASSIFICATION
# high number of categories --> no decision trees
# superlearner using GLMs, SVM, and XGBoost (as well as mean for control)
data$HQ.Location <- str_sub(data$HQ.Location, start = -2, end = -1)
data$HQ.Location[data$State == "DC"] <- "MD"
data$HQ.Location <- factor(data$HQ.Location)
data <- data[, !(colnames(data) %in% c("ID", "Last.Financing.Valuation", "Total.Raised", "Last.Financing.Size"))]
data$Classes <- factor(data$Classes)
train.sample <- sample(nrow(data), 700)
train <- data[train.sample, ]
total.test <- data[-train.sample, ]
test <- total.test[, !(colnames(data) %in% c("ID", "Classes"))]
target.test <- total.test[, "Classes"]
rf.model <- caret::train(Classes ~ ., train, "rf")
rf.data <- predict(cart.model, test)
linxgb.model <- caret::train(Classes ~ ., train, "xgbLinear")
linxgb.data <- predict(linxgb.model, test)
treexgb.model <- caret::train(Classes ~ ., train, "xgbTree")
treexgb.data <- predict(treexgb.model, test)
logit.model <- caret::train(Classes ~ ., train, "LogitBoost")
logit.data <- predict(logit.model, test)
elm.model <- caret::train(Classes ~ ., train, "elm")
elm.data <- predict(elm.model, test)
ctree.model <- caret::train(Classes ~ ., train, "ctree")
ctree.data <- predict(deep.model, test)
treebag.model <- caret::train(Classes ~ ., train, "treebag")
treebag.data <- predict(mlp.model, test)
nnet.model <- caret::train(Classes ~ ., train, "nnet")
nnet.data <- predict(nnet.model, test)
knn.model <- caret::train(Classes ~ ., train, "knn")
knn.data <- predict(knn.model, test)
accuracies <- c(accuracy(rf.data, target.test),
accuracy(linxgb.data, target.test),
accuracy(treexgb.data, target.test),
accuracy(elm.data, target.test),
accuracy(treebag.data, target.test),
accuracy(ctree.data, target.test),
accuracy(nnet.data, target.test),
accuracy(knn.data, target.test))
scaled.acc <- accuracies / sum(accuracies)
predictions.df <- data.frame(rf = rf.data, lxgb = linxgb.data, txgb = treexgb.data,
elm = elm.data, ctree = ctree.data,
treebag = treebag.data, nnet = nnet.data, knn = knn.data, target = target.test)
class.prob <- with(predictions.df,
scaled.acc[1] * as.numeric(rf) + scaled.acc[2] * as.numeric(lxgb) +
scaled.acc[3] * as.numeric(txgb) + scaled.acc[4] * as.numeric(elm) +
scaled.acc[5] * as.numeric(ctree) + scaled.acc[6] * as.numeric(treebag) +
scaled.acc[7] * as.numeric(nnet) + scaled.acc[8] * as.numeric(knn))
final.predictions <- round(class.prob)
final.predictions
table(final.predictions, target.test)
accuracy(final.predictions, target.test)
accuracies
kappa(final.predictions, target.test)
postResample(final.predictions, target.test)
classes <- c()
for(i in 1 : length(sub.data$Last.Financing.Size)) {
dummy <- sub.data$Last.Financing.Size[i]
if(dummy <= 5)       { classes[i] <- 1 }
else if(dummy <= 25) { classes[i] <- 2 }
else if(dummy <= 45) { classes[i] <- 3 }
else                 { classes[i] <- 4 }
}
data$Classes <- classes
# MODEL BUILDING
#TODO: TURN THIS INTO A CLASSIFICATION
# high number of categories --> no decision trees
# superlearner using GLMs, SVM, and XGBoost (as well as mean for control)
data$HQ.Location <- str_sub(data$HQ.Location, start = -2, end = -1)
data$HQ.Location[data$State == "DC"] <- "MD"
data$HQ.Location <- factor(data$HQ.Location)
train.sample <- sample(nrow(data), 700)
data <- data[, !(colnames(data) %in% c("ID", "Last.Financing.Valuation", "Total.Raised", "Last.Financing.Size"))]
data$Classes <- factor(data$Classes)
train <- data[train.sample, ]
total.test <- data[-train.sample, ]
test <- total.test[, !(colnames(data) %in% c("ID", "Classes"))]
target.test <- total.test[, "Classes"]
rf.model <- caret::train(Classes ~ ., train, "rf")
rf.data <- predict(cart.model, test)
linxgb.model <- caret::train(Classes ~ ., train, "xgbLinear")
test
colnames(test)
colnames(data)
data <- read.csv('data.csv', stringsAsFactors = F, strip.white = T, na.strings = "")
# DATA CLEANING
data$Total.Raised <- as.numeric(data$Total.Raised)
data$Last.Financing.Size <- as.numeric(data$Last.Financing.Size)
data$Total.Raised <- data$Total.Raised - data$Last.Financing.Size
data <- as.data.frame(lapply(data, factor))
data$ID <- seq(1, length(data$Employees))
data$Employees <- as.integer(levels(data$Employees))[data$Employees]
data$Last.Financing.Size <- as.numeric(levels(data$Last.Financing.Size))[data$Last.Financing.Size]
data$Last.Financing.Valuation <- as.numeric(levels(data$Last.Financing.Valuation))[data$Last.Financing.Valuation]
data$Total.Raised <- as.numeric(levels(data$Total.Raised))[data$Total.Raised]
data <- dplyr::select(data, -c(1, 4, 5, 6, 9, 15, 16, 17))
colnames(data)
data$Last.Financing.Deal.Type.2 <- sub.data$Last.Financing.Deal.Type.2
data$Last.Financing.Valuation <- sub.data$Last.Financing.Valuation
data$Total.Raised <- sub.data$Total.Raised
data$Last.Financing.Size <- sub.data$Last.Financing.Size
classes <- c()
for(i in 1 : length(sub.data$Last.Financing.Size)) {
dummy <- sub.data$Last.Financing.Size[i]
if(dummy <= 5)       { classes[i] <- 1 }
else if(dummy <= 25) { classes[i] <- 2 }
else if(dummy <= 45) { classes[i] <- 3 }
else                 { classes[i] <- 4 }
}
data$Classes <- classes
colnames(data)
# MODEL BUILDING
#TODO: TURN THIS INTO A CLASSIFICATION
# high number of categories --> no decision trees
# superlearner using GLMs, SVM, and XGBoost (as well as mean for control)
data$HQ.Location <- str_sub(data$HQ.Location, start = -2, end = -1)
data$HQ.Location[data$State == "DC"] <- "MD"
data$HQ.Location <- factor(data$HQ.Location)
train.sample <- sample(nrow(data), 700)
data <- data[, !(colnames(data) %in% c("ID", "Last.Financing.Valuation", "Total.Raised", "Last.Financing.Size"))]
data$Classes <- factor(data$Classes)
train <- data[train.sample, ]
total.test <- data[-train.sample, ]
test <- total.test[, !(colnames(data) %in% c("ID", "Classes"))]
target.test <- total.test[, "Classes"]
colnames(train)
colnames(test)
rf.model <- caret::train(Classes ~ ., train, "rf")
rf.data <- predict(cart.model, test)
linxgb.model <- caret::train(Classes ~ ., train, "xgbLinear")
linxgb.data <- predict(linxgb.model, test)
treexgb.model <- caret::train(Classes ~ ., train, "xgbTree")
treexgb.data <- predict(treexgb.model, test)
logit.model <- caret::train(Classes ~ ., train, "LogitBoost")
logit.data <- predict(logit.model, test)
elm.model <- caret::train(Classes ~ ., train, "elm")
elm.data <- predict(elm.model, test)
ctree.model <- caret::train(Classes ~ ., train, "ctree")
ctree.data <- predict(deep.model, test)
treebag.model <- caret::train(Classes ~ ., train, "treebag")
treebag.data <- predict(mlp.model, test)
nnet.model <- caret::train(Classes ~ ., train, "nnet")
nnet.data <- predict(nnet.model, test)
knn.model <- caret::train(Classes ~ ., train, "knn")
knn.data <- predict(knn.model, test)
accuracies <- c(accuracy(rf.data, target.test),
accuracy(linxgb.data, target.test),
accuracy(treexgb.data, target.test),
accuracy(elm.data, target.test),
accuracy(treebag.data, target.test),
accuracy(ctree.data, target.test),
accuracy(nnet.data, target.test),
accuracy(knn.data, target.test))
scaled.acc <- accuracies / sum(accuracies)
predictions.df <- data.frame(rf = rf.data, lxgb = linxgb.data, txgb = treexgb.data,
elm = elm.data, ctree = ctree.data,
treebag = treebag.data, nnet = nnet.data, knn = knn.data, target = target.test)
class.prob <- with(predictions.df,
scaled.acc[1] * as.numeric(rf) + scaled.acc[2] * as.numeric(lxgb) +
scaled.acc[3] * as.numeric(txgb) + scaled.acc[4] * as.numeric(elm) +
scaled.acc[5] * as.numeric(ctree) + scaled.acc[6] * as.numeric(treebag) +
scaled.acc[7] * as.numeric(nnet) + scaled.acc[8] * as.numeric(knn))
final.predictions <- round(class.prob)
final.predictions
table(final.predictions, target.test)
postResample(final.predictions, target.test)
varImp(rf.model)
accuracies
varImp(treexgb.model)
varImp(elm.model)
data$Last.Financing.Deal.Type.2
data$Last.Financing.Deal.Type
colnames(data)
varImp(logit.data)
varImp(logit.method)
varImp(logit.model)
varImp(knn.model)
varImp(nnet.model)
scaled.acc <-
s
scaled.acc <- rep(1, 8)
scaled.acc
class.prob <- with(predictions.df,
scaled.acc[1] * as.numeric(rf) + scaled.acc[2] * as.numeric(lxgb) +
scaled.acc[3] * as.numeric(txgb) + scaled.acc[4] * as.numeric(elm) +
scaled.acc[5] * as.numeric(ctree) + scaled.acc[6] * as.numeric(treebag) +
scaled.acc[7] * as.numeric(nnet) + scaled.acc[8] * as.numeric(knn))
final.predictions <- round(class.prob)
postResample(final.predictions, target.test)
class.prob
class.prob <- class.prob / 8
final.predictions <- round(class.prob)
postResample(final.predictions, target.test)
scaled.acc <- accuracies / sum(accuracies)
predictions.df <- data.frame(rf = rf.data, lxgb = linxgb.data, txgb = treexgb.data,
elm = elm.data, ctree = ctree.data,
treebag = treebag.data, nnet = nnet.data, knn = knn.data, target = target.test)
class.prob <- with(predictions.df,
scaled.acc[1] * as.numeric(rf) + scaled.acc[2] * as.numeric(lxgb) +
scaled.acc[3] * as.numeric(txgb) + scaled.acc[4] * as.numeric(elm) +
scaled.acc[5] * as.numeric(ctree) + scaled.acc[6] * as.numeric(treebag) +
scaled.acc[7] * as.numeric(nnet) + scaled.acc[8] * as.numeric(knn))
final.predictions <- round(class.prob)
data$HQ.Location
source('C:/Users/Abhinav/Desktop/VC-PE-Engine/exploratory.R', echo=TRUE)
data2 <- read.csv('data.csv')
seriesA <- data2[data2$Last.Financing.Deal.Type.2 %in% A, ]
source('C:/Users/Abhinav/Desktop/VC-PE-Engine/exploratory.R', echo=TRUE)
cp <- ggplot(regions.df, aes(x = Region, y = Last.Financing.Size)) + geom_bar(stat = "cpunt")
cp <- ggplot(regions.df, aes(x = Region, y = Last.Financing.Size)) + geom_bar(stat = "count")
cp
p0 <- ggplot(data2, aes(x = Total.Raised)) + geom_histogram(binwidth = 25)
p0
data2$Total.Raised
data2$Total.Raised <- as.numeric(data2$Total.Raised)
seriesA <- data2[data2$Last.Financing.Deal.Type.2 %in% A, ]
seriesB <- data2[data2$Last.Financing.Deal.Type.2 %in% B, ]
seriesC <- data2[data2$Last.Financing.Deal.Type.2 %in% C, ]
series.angel <- data2[data2$Last.Financing.Deal.Type.2 %in% Angel, ]
series.seed <- data2[data2$Last.Financing.Deal.Type.2 %in% Seed, ]
p0 <- ggplot(data2, aes(x = Total.Raised)) + geom_histogram(binwidth = 25)
p0
p0 <- ggplot(data2, aes(x = Total.Raised)) + geom_histogram(binwidth = 10)
p0
p0 <- ggplot(data2, aes(x = Employees)) + geom_histogram(binwidth = 10)
p0
factor(data2$Employees)
data2$Last.Financing.Deal.Type.2[data2$Last.Financing.Deal.Type.2 %in% A] <- "A"
data2$Last.Financing.Deal.Type.2 <- as.character(data2$Last.Financing.Deal.Type.2)
data2$Last.Financing.Deal.Type.2[data2$Last.Financing.Deal.Type.2 %in% A] <- "A"
data2$Last.Financing.Deal.Type.2[data2$Last.Financing.Deal.Type.2 %in% B] <- "B"
data2$Last.Financing.Deal.Type.2[data2$Last.Financing.Deal.Type.2 %in% C] <- "C"
data2$Last.Financing.Deal.Type.2[data2$Last.Financing.Deal.Type.2 %in% Seed] <- "Seed"
data2$Last.Financing.Deal.Type.2[data2$Last.Financing.Deal.Type.2 %in% Angel] <- "Angel"
p0 <- ggplot(data2, aes(x = Total.Raised, color = Last.Financing.Deal.Type.2)) + geom_histogram(binwidth = 10)
p0
p0 <- ggplot(data2, aes(x = Total.Raised, fill = Last.Financing.Deal.Type.2)) + geom_histogram(binwidth = 10)
p0
p0 <- ggplot(data2, aes(x = Last.Financing.Size, fill = Last.Financing.Deal.Type.2)) + geom_histogram(binwidth = 10)
p0
data2 <- data2[complete.cases(data2), ]
data2$Last.Financing.Deal.Type.2[data2$Last.Financing.Deal.Type.2 %in% A] <- "A"
data2$Last.Financing.Deal.Type.2[data2$Last.Financing.Deal.Type.2 %in% B] <- "B"
data2$Last.Financing.Deal.Type.2[data2$Last.Financing.Deal.Type.2 %in% C] <- "C"
data2$Last.Financing.Deal.Type.2[data2$Last.Financing.Deal.Type.2 %in% Seed] <- "Seed"
data2$Last.Financing.Deal.Type.2[data2$Last.Financing.Deal.Type.2 %in% Angel] <- "Angel"
p0 <- ggplot(data2, aes(x = Last.Financing.Size, fill = Last.Financing.Deal.Type.2)) + geom_histogram(binwidth = 10)
p0
p0 <- ggplot(data2, aes(x = HQ.Location, fill = Last.Financing.Deal.Type.2)) + geom_histogram(binwidth = 10)
p0
p0 <- ggplot(data2, aes(x = HQ.Location, fill = Last.Financing.Deal.Type.2)) + geom_bar(binwidth = 10)
p0
p0 <- ggplot(data2, aes(x = HQ.Location, fill = Last.Financing.Deal.Type.2)) + geom_bar(stat = 'identity', binwidth = 10)
p0
p0 <- ggplot(data2, aes(x = HQ.Location, fill = Last.Financing.Deal.Type.2)) + geom_bar(stat = 'count')
p0
data2 %>% count(HQ.Location)
ends_with("San Francisco, CA", "CA")
ends_with("San Francisco, CA", F, "CA")
ends_with("CA", F, "San Francisco, CA")
data3 <- data2 %>% filter(ends_with(c("CA", "NY", "DC", "TX"), F, HQ.Location)
s
data3 <- data2 %>% filter(ends_with(c("CA", "NY", "DC", "TX"), F, HQ.Location))
data3 <- data2 %>% filter(ends_with("CA|NY|DC|TX", F, HQ.Location))
data2$HQ.Location <- as.character(data2$HQ.Location)
data3 <- data2 %>% filter(ends_with("CA|NY|DC|TX", F, HQ.Location))
data3 <- data2[ends_with("CA|NY|DC|TX", F, HQ.Location), ]
data3 <- data2[ends_with("CA|NY|DC|TX", F, data2$HQ.Location), ]
data
data3
p0 <- ggplot(data3, aes(x = HQ.Location, fill = Last.Financing.Deal.Type.2)) + geom_bar(stat = 'count')
p0
data3$HQ.Location
citation(caret)
citation('caret')
postResample(final.predictions,target.test)
table(final.predictions,target.test)
varImp(ctree.model)
df <- CA	517
NY	148
TX	46
IL	38
MA	74
df <- data.frame(regions=c("Northwest", "Southwest", "Northeast", "Southeast", "Midwest"), counts = c(516,64,261,59,73))
ggplot(df, aes(x = regions, y = counts)) + geom_bar()
ggplot(df, aes(x = regions)) + geom_bar()
df
ggplot(df, aes(x = counts)) + geom_bar()
ggplot(df, aes(x = region, y = counts)) + geom_bar(stat = 'identity')
ggplot(df, aes(x = regions, y = counts)) + geom_bar(stat = 'identity')
df <- data.frame(Regions=c("Northwest", "Southwest", "Northeast", "Southeast", "Midwest"), Counts = c(516,64,261,59,73))
ggplot(df, aes(x = Regions, y = Counts)) + geom_bar(stat = 'identity')
ggplot(df, aes(x = Regions, y = Counts)) + geom_bar(stat = 'identity') + ggthemes::ptol_pal()
ggplot(df, aes(x = Regions, y = Counts)) + geom_bar(stat = 'identity') + ggthemes::fivethirtyeight_pal()
ggplot(df, aes(x = Regions, y = Counts)) + geom_bar(stat = 'identity') + theme_fivethirtyeight()
ggplot(df, aes(x = Regions, y = Counts), fill = "darkblue") + geom_bar(stat = 'identity') + theme_fivethirtyeight()
ggplot(df, aes(x = Regions, y = Counts), fill = "darkblue") + geom_bar(stat = 'identity', fill = "darkblue") + theme_fivethirtyeight()
ggplot(df, aes(x = Regions, y = Counts), fill = "darkblue") + geom_bar(stat = 'identity', fill = "darkblue") + theme_fivethirtyeight() + xlab("Region") + ylab("Counts")
citation("R")
citation("r")
citation("ggplot2")
citation("ggthemes")
citation('tidyverse')
citation("caret")
citation("mice")
q <- c(rf.data, linxgb.data)
accuracy(q, target.test)
sapply(q, accuracy(target.test))
sapply(q, accuracy(., target.test))
sapply(q, accuracy, actual = target.test)
sapply(q, Metrics::accuracy, actual = target.test)
vapply(q, Metrics::accuracy, actual = target.test)
lapply(q, Metrics::accuracy, actual = target.test)
lapply(predictions.df, Metrics::accuracy, actual = target.test)
q
q <- list(rf.data, linxgb.data)
q
lapply(q, accuracy, actual = target.test)
target.test
treexgb.data
q <- list(linxgb.data, treexgb.data)
lapply(q, Metrics::accuracy, actual = target.test)
as.vector(lapply(q, Metrics::accuracy, actual = target.test))
q <- list(rf.data, linxgb.data, treexgb.data, elm.data, treebag.data, ctree.data, nnet.data, knn.data)
s <- as.vector(lapply(q, Metrics::accuracy, actual = target.test))
q <- list(linxgb.data, treexgb.data)
s <- as.vector(lapply(q, Metrics::accuracy, actual = target.test))
max(s)
s <- unlist(lapply(q, Metrics::accuracy, actual = target.test))
s
q <- list(rf.data, linxgb.data, treexgb.data, elm.data, treebag.data, ctree.data, nnet.data, knn.data)
q[[1]]
write.csv(final.predictions, file = "results.csv", row.names = F)
